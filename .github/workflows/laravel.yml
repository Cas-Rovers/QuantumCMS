name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: password
          ports:
            - 3306:3306

      postgres:
        image: postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testbench
          ports:
            - 5432:5432

      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_sqlite
          ini-values: post_max_size=256M, max_execution_time=180
          coverage: xdebug
          tools: php-cs-fixer, phpunit

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          key: 'vendor'
          path: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys:
            ${{ runner.os }}-php-

      - name: Install Composer dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: npm install --no-progress

      - name: Build assets
        run: npm run build --no-progress

      - name: Create databases
        run: |
          touch testbench.sqlite
          mysql -e 'CREATE DATABASE testbench' -h127.0.0.1 -uroot -ppassword -P ${{ job.services.mysql.ports[3306] }}

      - name: Run migrations
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan migrate --force

      - name: Run test suite (MySQL)
        env:
          APP_KEY: base64:i3g6f+dV8FfsIkcxqd7gbiPn2oXk5r00sTmdD6V5utI=
          DB_CONNECTION: mysql
          DB_DATABASE: testbench
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: password
          QUEUE_CONNECTION: redis
          REDIS_HOST: 127.0.0.1
          REDIS_PASSWORD:
          REDIS_PORT: 6379
        run: php artisan test --coverage-text --coverage-xml --coverage-clover

      - name: Run test suite (PostgreSQL)
        env:
          APP_KEY: base64:i3g6f+dV8FfsIkcxqd7gbiPn2oXk5r00sTmdD6V5utI=
          DB_CONNECTION: pgsql
          DB_DATABASE: testbench
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USERNAME: root
          DB_PASSWORD: password
          QUEUE_CONNECTION: redis
          REDIS_HOST: 127.0.0.1
          REDIS_PASSWORD:
          REDIS_PORT: 6379
        run: php artisan test --coverage-text --coverage-xml --coverage-clover
